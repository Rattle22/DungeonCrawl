using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace RatStudios.Projectile
{
    public delegate void FireballModifierDelegate(FireballBase fb);
    /// <summary>
    /// Calculates a relative position from (0,0) based on the given Time. </br>
    /// Can be used to pass a movement path as a function.
    /// </summary>
    /// <param name="moveTime">How long the given thing moved so far. Used to calculate the position.</param>
    /// <returns>A relative position based on moveTime.</returns>
    public delegate Vector2 MovementDelegate(float moveTime, FireballBase fireball);
    public delegate void OnHitDelegate(FireballBase fb, Entity_Life enemyHit);
    public delegate void OnDamageDelegate(FireballBase fb, Entity_Life enemyHit, int amount);
    public delegate void OnDissipateDelegate(FireballBase fb);

    /// <summary>
    /// A Fireball is but a carrier for functions generated by items.
    /// </summary>
    public class FireballBase : MonoBehaviour
    {
        private GameObject source;
        public GameObject Source
        {
            get { return source; }
            set { source = value; }
        }
        private float aliveFor = 0;
        private float moveTime = 0;
        private Vector3 startPosition;
        private Quaternion startOrientation;

        private int power = 5;
        public int Power
        {
            get { return power; }
            set { power = value; }
        }
        private int speed = 10;
        public int Speed
        {
            get { return speed; }
            set { speed = value; }
        }
        private bool penetrationOverride = false;
        public void overrideOnHitDestruction() {
            penetrationOverride = true;
        }

        private List<MovementDelegate> movementFunctions = new List<MovementDelegate>();
        private List<OnHitDelegate> onHitFunctions = new List<OnHitDelegate>();
        private List<OnDamageDelegate> onDamageFunctions = new List<OnDamageDelegate>();
        private List<OnDissipateDelegate> onDissipateFunctions = new List<OnDissipateDelegate>();

        /// <summary>
        /// Creates a fireball with default behaviour.
        /// </summary>
        public void addMovement(MovementDelegate movementFunction)
        {
            movementFunctions.Add(movementFunction);
        }

        public void addOnHit(OnHitDelegate onHitFunction)
        {
            onHitFunctions.Add(onHitFunction);
        }

        public void addOnDamage(OnDamageDelegate onDamageFunction)
        {
            onDamageFunctions.Add(onDamageFunction);
        }

        public void addOnDissipate(OnDissipateDelegate onDissipateFunction) {
            onDissipateFunctions.Add(onDissipateFunction);
        }

        private void resetInitialPosition()
        {
            startPosition = transform.position;
            startPosition.z = 0;
            startOrientation = transform.rotation;
            moveTime = 0;
        }

        // Use this for initialization
        void Start()
        {
            resetInitialPosition();
        }

        // Update is called once per frame
        void Update()
        {
            aliveFor += Time.deltaTime;
            moveTime += Time.deltaTime;
            var movement = new Vector3(moveTime, 0, 0);

            foreach (MovementDelegate d in movementFunctions)
            {
                var result = d(moveTime, this);
                movement += new Vector3(result.x, result.y);
            }

            movement = startOrientation * movement;
            movement = movement * speed;
            var v3pos = new Vector3(startPosition.x + movement.x, startPosition.y + movement.y, transform.position.z);
            var lookAt = v3pos - transform.position;

            //Using .up instead of .right because the sprite is oriented that way
            transform.rotation = Quaternion.FromToRotation(Vector3.up, lookAt);
            transform.position = v3pos;
        }

        public void OnBecameInvisible()
        {
            Destroy(gameObject);
        }

        /// <summary>
        /// Makes this fireball damage the given target. Applies onDamage effects.
        /// </summary>
        /// <param name="target"></param>
        public void damage(Entity_Life target)
        {
            target.dealDamage(power);
            foreach (OnDamageDelegate applyEffect in onDamageFunctions)
            {
                applyEffect(this, target, power);
            }
        }

        /// <summary>
        /// Triggers onhit effects.
        /// </summary>
        /// <param name="other"></param>
        public void OnTriggerEnter2D(Collider2D other)
        {
            Enemy_Life enemy = other.GetComponent<Enemy_Life>();
            if (enemy != null)
            {
                damage(enemy);
                foreach (OnHitDelegate applyEffect in onHitFunctions)
                {
                    applyEffect(this, enemy);
                }
            }

            //TODO: Use collision layers instead
            if (!other.gameObject.Equals(source) && !penetrationOverride && !other.isTrigger)
            {
                dissipate();
            }
        }

        public void dissipate() {
            foreach (OnDissipateDelegate d in onDissipateFunctions) {
                d(this);
            }
            Destroy(gameObject);
        }
    }
}